%*************************************************************************
%
% Project Name: Complex Impulse Response (CIR) for mmWave transmissions
% File Name: getCIR.m
%
% Author: Miead Tehrani-Moayyed
% Work address: Wireless Networks and System Lab, 301 Ell Hall 
% Northeastern University, 360 Huntington Ave. Boston, MA 02115
% email: tehranimoayyed.m@husky.neu.edu
% Website: http://sites.google.com/site/mieadt/
% Last revision: 16-Feb-2018
%
% Function "getCIR.m" plots the complex channel impulse response (CIR)
% using a file with received power values and phase information
% for all multipath components arriving at the receiver site. This file is
% generated in our case by a ray-tracer (Wireless InSite from Remcom).
% Alternatively, these values can be obtained from measurements campaigns.
%
% "getCIR.m" has the following two INPUT arguments:
%   file_name - the name of the Wireless InSite CIR output file 
%   receiver_sensitivity - used to extract the paths stronger than a given
%   threshold (i.e., minimum value is (-250), which includes all paths
%   found by the ray-tracer).
%
% The CIR file generated by the Wireless InSite ray-tracer is an ASCII file
% with a two-line header and the following internal structure: 
%   1st column - path index
%   2st column - phase of the signal received from that path 
%   3rd column - time of arrival (TOA)
%   4th column - received power level for that particular path

% The OUTPUT of the "getCIR.m" function is a matrix that saves the
% information about the CIR in the same organization as the input to the
% function.
%
% Calling the getCIR() function with no output arguments plots the CIR for
% the input (received power and phase) values.
%
% Example of code for reading the CIR from the ray-tracer file:
%   scenario_filename='Complex_Conference Room Scenario.cir.t001_01.r002.p2m';
%   CCIR=get_cir(scenario_filename,receiver_sensitivity);
%    
% To only plot the Received Power and Phase values:
%    scenario_filename='Complex_Conference Room Scenario.cir.t001_01.r002.p2m';
%    get_cir(scenario_filename,receiver_sensitivity);
% 
% m-files required: none
% Subfunctions: none
% MAT-files required: none
% 
% See also: getCIR.m, exampleGetCIR.m
%
%*************************************************************************

%------------- BEGIN CODE --------------   

function CCIR=getCIR(file_name,receiver_sensitivity)
% line_ptr is used to point the line when there is a error reading its data
line_ptr=0;

% open the specified input file
path_file = fopen(file_name);

% ignore header of the file (Lines 1-4)
for i=1:4
    line = fgetl(path_file);
    line_ptr = line_ptr+1;
end

% Line 4 of the CIR file shows how many multipath components (rays) have
% been captured at the receiver
% simulation configuration in this scenario assumes # of receivers = 1
i=1;
while (1)
    line = fgetl(path_file);
    if (line == -1)
        break
    end
    line_ptr = line_ptr+1;
    [res,count] = sscanf(line,'%f %f %f %f');
    if  (count ~=4)
        error('EXIT getCIR function because of an unexpected value on line #%d of file %s ',line_ptr,file_name);
    end

    ccir(i,:)=res;
    
    i=i+1;
end

fclose(path_file);

%eliminate paths with received power values less than the desired
%receiver sensitivity
CCIR=ccir(ccir(:,4)>=receiver_sensitivity,:);

if nargout==0
    %plot Complex Channel Impulse Response (CCIR) when no output arguments are specified
    figure
    %plot the received Power Levels part of the CIR
    subplot(2,1,1);
    stem(CCIR(:,3),CCIR(:,4),'BaseValue',(min(CCIR(:,4))-10),'Marker','^');
    ylim([min(CCIR(:,4))-10 max(CCIR(:,4))+10]);
    
    xlabel('TOA (sec)')
    ylabel('Received Power (dB)')
    grid minor
    
    %plot the Phase part of the CIR
    subplot(2,1,2);
    stem(CCIR(:,3),CCIR(:,2),'BaseValue',(0));
    ylim([-180 +180]);
    
    xlabel('TOA (sec)')
    ylabel('Phase (degree)')
    grid minor
    set(gcf,'units','normalized','position',[1/3 1/8 1/3 3/4])
    
    %display number of paths that meet receiver sensitivity requirement
    disp([num2str(size(CCIR,1)) ' paths found with received power level [dB] >= ' num2str(receiver_sensitivity)]); 
    
end